syntax = "proto3";

import "v2/concordium/types.proto";

package concordium.v2;

service Queries {
  // Return a stream of blocks that arrive from the time the query is made onward.
  // This can be used to listen for incoming blocks.
  rpc GetBlocks (Empty) returns (stream ArrivedBlockInfo);

  // Return a stream of blocks that are finalized from the time the query is
  // made onward. This can be used to listen for newly finalized blocks. Note
  // that there is no guarantee that blocks will not be skipped if the client is
  // too slow in processing the stream, however blocks will always be sent by
  // increasing block height.
  rpc GetFinalizedBlocks (Empty) returns (stream FinalizedBlockInfo);

  // Retrieve the information about the given account in the given block.
  rpc GetAccountInfo (AccountInfoRequest) returns (AccountInfo);

  // Retrieve the list of accounts that exist at the end of the given block.
  rpc GetAccountList (BlockHashInput) returns (stream AccountAddress);

  // Get a list of all smart contract modules. The stream will end
  // when all modules that exist in the state at the end of the given
  // block have been returned.
  rpc GetModuleList (BlockHashInput) returns (stream ModuleRef);

  // Get a stream of ancestors for the provided block.
  // Starting with the provided block itself, moving backwards until no more
  // ancestors or the requested number of ancestors has been returned.
  rpc GetAncestors (AncestorsRequest) returns (stream BlockHash);

  // Get the source of a smart contract module.
  rpc GetModuleSource (ModuleSourceRequest) returns (VersionedModuleSource);

  // Get a list of addresses for all smart contract instances. The stream
  // will end when all instances that exist in the state at the end of the
  // given block has been returned.
  rpc GetInstanceList (BlockHashInput) returns (stream ContractAddress);

  // Get info about a smart contract instance as it appears at the end of the
  // given block.
  rpc GetInstanceInfo (InstanceInfoRequest) returns (InstanceInfo);

  // Get the exact state of a specific contract instance, streamed as a list of
  // key-value pairs. The list is streamed in lexicographic order of keys.
  rpc GetInstanceState (InstanceInfoRequest) returns (stream InstanceStateKVPair);

  // Get the value at a specific key of a contract state. In contrast to
  // `GetInstanceState` this is more efficient, but requires the user to know
  // the specific key to look for.
  rpc InstanceStateLookup(InstanceStateLookupRequest) returns (InstanceStateValueAtKey);

  // Get the best guess as to what the next account sequence number should be.
  // If all account transactions are finalized then this information is reliable.
  // Otherwise this is the best guess, assuming all other transactions will be
  // committed to blocks and eventually finalized.
  rpc GetNextAccountSequenceNumber (AccountAddress) returns (NextAccountSequenceNumber);

  // Get information about the current state of consensus.
  rpc GetConsensusInfo (Empty) returns (ConsensusInfo);

  // Get the status of and information about a specific block item (transaction).
  rpc GetBlockItemStatus (TransactionHash) returns (BlockItemStatus);

  // Get the cryptographic parameters in a given block.
  rpc GetCryptographicParameters (BlockHashInput) returns (CryptographicParameters);

  // Get information, such as height, timings, and transaction counts for the given block.
  rpc GetBlockInfo (BlockHashInput) returns (BlockInfo);

  // Get all the bakers at the end of the given block.
  rpc GetBakerList (BlockHashInput) returns (stream BakerId);

  // Get information about a given pool at the end of a given block.
  rpc GetPoolInfo (PoolInfoRequest) returns (PoolInfoResponse);

  // Get information about the passive delegators at the end of a given block.
  rpc GetPassiveDelegationInfo (BlockHashInput) returns (PassiveDelegationInfo);

  // Get a list of live blocks at a given height.
  rpc GetBlocksAtHeight (BlocksAtHeightRequest) returns (BlocksAtHeightResponse);

  // Get information about tokenomics at the end of a given block.
  rpc GetTokenomicsInfo (BlockHashInput) returns (TokenomicsInfo);

  // Run the smart contract entrypoint in a given context and in the state at
  // the end of the given block.
  rpc InvokeInstance (InvokeInstanceRequest) returns (InvokeInstanceResponse);

  // Get the registered delegators of a given pool at the end of a given block.
  // In contrast to the `GetPoolDelegatorsRewardPeriod` which returns delegators
  // that are fixed for the reward period of the block, this endpoint returns the
  // list of delegators that are registered in the block. Any changes to delegators
  // are immediately visible in this list.
  // The stream will end when all the delegators has been returned.
  rpc GetPoolDelegators (GetPoolDelegatorsRequest) returns (stream DelegatorInfo);

  // Get the fixed delegators of a given pool for the reward period of the given block.
  // In contracts to the `GetPoolDelegators` which returns delegators registered
  // for the given block, this endpoint returns the fixed delegators contributing
  // stake in the reward period containing the given block.
  // The stream will end when all the delegators has been returned.
  rpc GetPoolDelegatorsRewardPeriod (GetPoolDelegatorsRequest) returns (stream DelegatorRewardPeriodInfo);

  // Get the registered passive delegators at the end of a given block.
  // In contrast to the `GetPassiveDelegatorsRewardPeriod` which returns delegators
  // that are fixed for the reward period of the block, this endpoint returns the
  // list of delegators that are registered in the block. Any changes to delegators
  // are immediately visible in this list.
  // The stream will end when all the delegators has been returned.
  rpc GetPassiveDelegators (BlockHashInput) returns (stream DelegatorInfo);

  // Get the fixed passive delegators for the reward period of the given block.
  // In contracts to the `GetPassiveDelegators` which returns delegators registered
  // for the given block, this endpoint returns the fixed delegators contributing
  // stake in the reward period containing the given block.
  // The stream will end when all the delegators has been returned.
  rpc GetPassiveDelegatorsRewardPeriod (BlockHashInput) returns (stream DelegatorRewardPeriodInfo);

  // Get the current branches of blocks starting from and including the last finalized block.
  rpc GetBranches (Empty) returns (Branch);

  // Get the status of the node.
  // The `NodeStatus` includes information of
  // * Meta information such as the, version of the node, type of the node, uptime and the local time of the node.
  // * Network status which yields data such as the node id, packets sent/received,
  //   average bytes per second sent/received.
  // * ConsensusStatus. The `ConsensusStatus` returned depends on if the node supports
  //   the protocol on chain and whether the node is configured as a baker or not.
  rpc GetNodeStatus(Empty) returns (NodeStatus);
}
